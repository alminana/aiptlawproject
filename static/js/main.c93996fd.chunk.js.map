{"version":3,"sources":["components/Navbar/index.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","useState","click","setClick","setButton","closeMobileMenu","showButton","window","innerWidth","useEffect","addEventListener","className","to","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAuGeA,MAjGf,WAAmB,IAAD,EACUC,oBAAS,GADnB,mBACTC,EADS,KACFC,EADE,OAEYF,oBAAS,GAFrB,mBAEDG,GAFC,WAKVC,EAAkB,kBAAMF,GAAS,IAEjCG,EAAa,WACbC,OAAOC,YAAc,IACvBJ,GAAU,GAEVA,GAAU,IAUd,OANAK,qBAAU,WACRH,MACC,IAEHC,OAAOG,iBAAiB,SAAUJ,GAGhC,qCACE,qBAAKK,UAAU,UAAf,SACE,sBAAKA,UAAU,oBAAf,UACE,cAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,cAAcE,QAASR,EAA9C,mBAGA,qBAAKM,UAAU,YAAYE,QAxBf,kBAAMV,GAAUD,IAwB5B,SACE,mBAAGS,UAAWT,EAAQ,eAAiB,kBAEzC,qBAAIS,UAAWT,EAAQ,kBAAoB,WAA3C,UACE,oBAAIS,UAAU,WAAd,SACE,cAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,YAAYE,QAASR,EAA5C,oBAIF,oBAAIM,UAAU,WAAd,SACE,cAAC,IAAD,CACEC,GAAG,WACHD,UAAU,YACVE,QAASR,EAHX,wBAQF,oBAAIM,UAAU,WAAd,SACE,cAAC,IAAD,CACMC,GAAG,UACHD,UAAU,YACVE,QAASR,EAHf,uBASF,oBAAIM,UAAU,WAAd,SACA,cAAC,IAAD,CACMC,GAAG,aACHD,UAAU,YACVE,QAASR,EAHf,oBASA,oBAAIM,UAAU,WAAd,SACI,cAAC,IAAD,CACIC,GAAG,QACHD,UAAU,YACVE,QAASR,EAHb,oBASJ,oBAAIM,UAAU,WAAd,SACI,cAAC,IAAD,CACIC,GAAG,WACHD,UAAU,YACVE,QAASR,EAHb,+BAYV,yBAAUM,UAAU,yCC9EXG,G,MAZH,WACV,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,EAAD,YCEKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c93996fd.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Button } from '../../UI/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport '../Navbar/style/navbar.css';\r\n\r\n\r\nfunction Navbar() {\r\n  const [click, setClick] = useState(false);\r\n  const [button, setButton] = useState(true);\r\n\r\n  const handleClick = () => setClick(!click);\r\n  const closeMobileMenu = () => setClick(false);\r\n\r\n  const showButton = () => {\r\n    if (window.innerWidth <= 960) {\r\n      setButton(false);\r\n    } else {\r\n      setButton(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    showButton();\r\n  }, []);\r\n\r\n  window.addEventListener('resize', showButton);\r\n\r\n  return (\r\n    <>\r\n      <nav className='navbar '>\r\n        <div className='navbar-container '>\r\n          <Link to='/' className='navbar-logo' onClick={closeMobileMenu}>\r\n            AIP&T\r\n          </Link>\r\n          <div className='menu-icon' onClick={handleClick}>\r\n            <i className={click ? 'fas fa-times' : 'fas fa-bars'} />\r\n          </div>\r\n          <ul className={click ? 'nav-menu active' : 'nav-menu'}>\r\n            <li className='nav-item'>\r\n              <Link to='/' className='nav-links' onClick={closeMobileMenu}>\r\n                HOME\r\n              </Link>\r\n            </li>\r\n            <li className='nav-item'>\r\n              <Link\r\n                to='/service'\r\n                className='nav-links'\r\n                onClick={closeMobileMenu}\r\n              >\r\n                SERVICES\r\n              </Link>\r\n            </li>\r\n            <li className='nav-item'>\r\n              <Link\r\n                    to='/svgmap'\r\n                    className='nav-links'\r\n                    onClick={closeMobileMenu}\r\n                    >\r\n                    OFFICES\r\n              </Link>\r\n            </li>\r\n\r\n            <li className='nav-item'>\r\n            <Link\r\n                  to='/teamsmate'\r\n                  className='nav-links'\r\n                  onClick={closeMobileMenu}\r\n                  >\r\n                  TEAM\r\n            </Link>\r\n          </li>\r\n\r\n            <li className='nav-item'>\r\n                <Link\r\n                    to='/news'\r\n                    className='nav-links'\r\n                    onClick={closeMobileMenu}\r\n                    >\r\n                  NEWS\r\n                </Link>\r\n            </li>\r\n\r\n            <li className='nav-item'>\r\n                <Link\r\n                    to='/contact'\r\n                    className='nav-links'\r\n                    onClick={closeMobileMenu}\r\n                    >\r\n                    CONTACT\r\n                </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n  \r\n      <section  className=\"jumbotron-banner jumbotron-fluid\">\r\n      \r\n      </section>\r\n  \r\n    </>\r\n  );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\nimport {BrowserRouter as Router,Switch,Route, BrowserRouter} from 'react-router-dom';\nimport Navbar from './components/Navbar/index';\nimport './App.css';\n\nconst App = () =>  {\n  return (\n    <BrowserRouter>\n      <Router>\n        <Switch>\n          <Navbar/>\n        </Switch>\n      </Router>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}